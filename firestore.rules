rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to validate days (allows decimals and negative values)
    function isValidDays(days) {
      return days is number && days != 0.0;
    }

    // Helper function to validate operation type
    function isValidOperation(operation) {
      return operation in ['add', 'subtract'];
    }

    // Rules for users collection
    match /users/{userId} {
      // Allow read if user is authenticated and accessing their own document
      allow read: if isOwner(userId);
      
      // Allow create if user is authenticated and creating their own document
      allow create: if isOwner(userId) 
        && request.resource.data.keys().hasAll(['name', 'email', 'jobLevel', 'totalDays', 'usedDays', 'availableDays', 'createdAt'])
        && request.resource.data.email == request.auth.token.email
        && isValidDays(request.resource.data.totalDays)
        && isValidDays(request.resource.data.availableDays)
        && request.resource.data.usedDays >= 0.0;
      
      // Allow update if user is authenticated and updating their own document
      allow update: if isOwner(userId)
        && request.resource.data.diff(resource.data).affectedKeys()
            .hasAny(['jobLevel', 'totalDays', 'usedDays', 'availableDays', 'updatedAt'])
        && (
          !request.resource.data.diff(resource.data).affectedKeys().hasAny(['totalDays']) 
          || isValidDays(request.resource.data.totalDays)
        )
        && (
          !request.resource.data.diff(resource.data).affectedKeys().hasAny(['availableDays']) 
          || isValidDays(request.resource.data.availableDays)
        )
        && (
          !request.resource.data.diff(resource.data).affectedKeys().hasAny(['usedDays']) 
          || request.resource.data.usedDays >= 0.0
        );
    }

    // Rules for timeOffEntries collection
    match /timeOffEntries/{entryId} {
      // Allow read if user is authenticated and the entry belongs to them
      allow read: if isAuthenticated() 
        && request.auth.uid == resource.data.userId;
      
      // Allow create if user is authenticated and creating their own entry
      allow create: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['userId', 'startDate', 'endDate', 'days', 'reason', 'type', 'createdAt'])
        && isValidDays(request.resource.data.days);
      
      // Allow delete if user is authenticated and the entry belongs to them
      allow delete: if isAuthenticated()
        && request.auth.uid == resource.data.userId;
    }

    // Rules for daysAdjustments collection
    match /daysAdjustments/{adjustmentId} {
      // Allow read if user is authenticated and the adjustment belongs to them
      allow read: if isAuthenticated() 
        && request.auth.uid == resource.data.userId;
      
      // Allow create if user is authenticated and creating their own adjustment
      allow create: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['userId', 'days', 'type', 'reason', 'createdAt', 'operation'])
        && isValidDays(request.resource.data.days)
        && isValidOperation(request.resource.data.operation)
        && (
          // If subtracting, days should be negative
          (request.resource.data.operation == 'subtract' && request.resource.data.days < 0)
          ||
          // If adding, days should be positive
          (request.resource.data.operation == 'add' && request.resource.data.days > 0)
        );
      
      // Don't allow updates or deletes of adjustments
      allow update, delete: if false;
    }

    // Deny access to all other documents by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 