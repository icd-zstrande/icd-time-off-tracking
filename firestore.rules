rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isManager(userId) {
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(userId)) &&
        get(/databases/$(database)/documents/users/$(userId)).data.managerId == request.auth.uid;
    }

    // Users collection
    match /users/{userId} {
      // Allow listing all users for manager selection
      allow list: if isAuthenticated();
      
      allow read: if isAuthenticated() && 
        (isOwner(userId) || 
         isManager(userId));
         
      allow update: if isOwner(userId) && 
        // Only allow updating specific fields
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['jobLevel', 'totalDays', 'managerId', 'updatedAt']);
          
      allow create: if isAuthenticated();
    }

    // Time off entries
    match /timeOffEntries/{entryId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         isManager(resource.data.userId));
      allow write: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Days adjustments
    match /daysAdjustments/{adjustmentId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         isManager(resource.data.userId));
      allow write: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
  }
} 